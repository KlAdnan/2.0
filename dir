import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import yfinance as yf
from streamlit_option_menu import option_menu
import sqlite3
import hashlib
import matplotlib.pyplot as plt
import streamlit.components.v1 as components
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, Image
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
import io
import os
import time
import random
import base64
from streamlit_lottie import st_lottie
import requests
import json

# ============ PAGE CONFIG ============
st.set_page_config(
    page_title="AI Financial Planner",
    page_icon="ðŸ’µ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ============ SESSION STATE ============
if 'dark_mode' not in st.session_state:
    st.session_state.dark_mode = False
if 'user_id' not in st.session_state:
    st.session_state.user_id = None
if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False
if 'theme' not in st.session_state:
    st.session_state.theme = "light"
if 'loans' not in st.session_state:
    st.session_state.loans = []
if 'currency' not in st.session_state:
    st.session_state.currency = "INR"
if 'currency_symbol' not in st.session_state:
    st.session_state.currency_symbol = "â‚¹"
if 'notifications' not in st.session_state:
    st.session_state.notifications = []
if 'page_transition' not in st.session_state:
    st.session_state.page_transition = False
if 'achievement_points' not in st.session_state:
    st.session_state.achievement_points = 0
if 'accessibility_mode' not in st.session_state:
    st.session_state.accessibility_mode = False

# ============ UTILITY FUNCTIONS ============
def load_lottie(url: str):
    r = requests.get(url)
    if r.status_code != 200:
        return None
    return r.json()

def local_css(file_name):
    with open(file_name) as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

def get_svg(file_path):
    with open(file_path, 'r') as f:
        return f.read()

def add_bg_from_local(image_file):
    with open(image_file, "rb") as image_file:
        encoded_string = base64.b64encode(image_file.read()).decode()
    st.markdown(
        f"""
        <style>
        .stApp {{
            background-image: url(data:image/png;base64,{encoded_string});
            background-size: cover;
        }}
        </style>
        """,
        unsafe_allow_html=True
    )

# ============ THEME SWITCHER ============
def theme_switcher():
    themes = {
        "Light": {"name": "light", "icon": "bi-sun-fill"},
        "Dark": {"name": "dark", "icon": "bi-moon-fill"},
        "Royal Blue": {"name": "royal", "icon": "bi-palette-fill"}
    }
    
    # CSS for toggle buttons
    toggle_css = """
    <style>
    .theme-toggle {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-bottom: 20px;
    }
    .toggle-btn {
        border: none;
        padding: 10px;
        border-radius: 50%;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    .toggle-btn:hover {
        transform: scale(1.1);
    }
    .light-btn {
        background: linear-gradient(135deg, #f5f7fa, #c3cfe2);
        color: #1E3932;
    }
    .dark-btn {
        background: linear-gradient(135deg, #2c3e50, #4b6cb7);
        color: white;
    }
    .royal-btn {
        background: linear-gradient(135deg, #1a2980, #26d0ce);
        color: white;
    }
    .active {
        box-shadow: 0 0 0 3px #00704A;
    }
    </style>
    """
    
    st.sidebar.markdown(toggle_css, unsafe_allow_html=True)
    
    # Create HTML for toggle buttons
    toggle_html = '<div class="theme-toggle">'
    for theme, details in themes.items():
        active_class = "active" if st.session_state.theme == details["name"] else ""
        toggle_html += f"""
        <button 
            class="toggle-btn {details['name']}-btn {active_class}" 
            onclick="setTheme('{details['name']}')">
            <i class="bi {details['icon']}"></i>
        </button>
        """
    toggle_html += '</div>'
    
    # JavaScript for handling theme toggle
    theme_js = """
    <script>
    function setTheme(theme) {
        const params = new URLSearchParams(window.location.search);
        params.set('theme', theme);
        window.location.search = params.toString();
    }
    
    // Read theme from URL
    document.addEventListener('DOMContentLoaded', function() {
        const urlParams = new URLSearchParams(window.location.search);
        const theme = urlParams.get('theme');
        if (theme) {
            // Apply theme immediately to avoid flash
            document.body.dataset.theme = theme;
        }
    });
    </script>
    """
    
    st.sidebar.markdown(theme_js, unsafe_allow_html=True)
    st.sidebar.markdown(toggle_html, unsafe_allow_html=True)
    
    # Get theme from URL parameter
    query_params = st.experimental_get_query_params()
    if 'theme' in query_params:
        selected_theme = query_params['theme'][0]
        if any(details["name"] == selected_theme for details in themes.values()):
            st.session_state.theme = selected_theme
    
    return st.session_state.theme

# ============ CURRENCY SWITCHER ============
def currency_switcher():
    currencies = {
        "INR": {"symbol": "â‚¹", "icon": "bi-currency-rupee", "flag": "ðŸ‡®ðŸ‡³"},
        "USD": {"symbol": "$", "icon": "bi-currency-dollar", "flag": "ðŸ‡ºðŸ‡¸"},
        "AED": {"symbol": "Ø¯.Ø¥", "icon": "bi-cash-coin", "flag": "ðŸ‡¦ðŸ‡ª"},
        "SAR": {"symbol": "ï·¼", "icon": "bi-cash-coin", "flag": "ðŸ‡¸ðŸ‡¦"},
        "CAD": {"symbol": "C$", "icon": "bi-currency-dollar", "flag": "ðŸ‡¨ðŸ‡¦"},
        "QAR": {"symbol": "ï·¼", "icon": "bi-cash-coin", "flag": "ðŸ‡¶ðŸ‡¦"},
        "CNY": {"symbol": "Â¥", "icon": "bi-currency-yen", "flag": "ðŸ‡¨ðŸ‡³"}
    }
    
    # Create custom currency selector with flags
    currency_html = """
    <style>
    .currency-selector {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin: 10px 0;
    }
    .currency-option {
        display: flex;
        align-items: center;
        padding: 8px 12px;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(5px);
    }
    .currency-option:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    .currency-option.active {
        background: #00704A;
        color: white;
    }
    .currency-flag {
        margin-right: 6px;
        font-size: 16px;
    }
    </style>
    <div class="currency-selector">
    """
    
    for code, details in currencies.items():
        active = "active" if st.session_state.currency == code else ""
        currency_html += f"""
        <div class="currency-option {active}" onclick="setCurrency('{code}')">
            <span class="currency-flag">{details['flag']}</span>
            <span>{code}</span>
        </div>
        """
    
    currency_html += """
    </div>
    <script>
    function setCurrency(code) {
        const params = new URLSearchParams(window.location.search);
        params.set('currency', code);
        window.location.search = params.toString();
    }
    </script>
    """
    
    st.sidebar.markdown("<h3>Select Currency</h3>", unsafe_allow_html=True)
    st.sidebar.markdown(currency_html, unsafe_allow_html=True)
    
    # Get currency from URL parameter
    query_params = st.experimental_get_query_params()
    if 'currency' in query_params:
        selected_currency = query_params['currency'][0]
        if selected_currency in currencies:
            st.session_state.currency = selected_currency
            st.session_state.currency_symbol = currencies[selected_currency]["symbol"]
    
    return currencies[st.session_state.currency]["symbol"]

# ============ ACCESSIBILITY FEATURES ============
def toggle_accessibility():
    accessibility_html = """
    <style>
    .accessibility-toggle {
        display: flex;
        align-items: center;
        margin: 15px 0;
    }
    .toggle-switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }
    .toggle-switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }
    .toggle-slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
        border-radius: 34px;
    }
    .toggle-slider:before {
        position: absolute;
        content: "";
        height: 26px;
        width: 26px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        transition: .4s;
        border-radius: 50%;
    }
    input:checked + .toggle-slider {
        background-color: #00704A;
    }
    input:checked + .toggle-slider:before {
        transform: translateX(26px);
    }
    .accessibility-label {
        margin-left: 10px;
        font-weight: 500;
    }
    </style>
    <div class="accessibility-toggle">
        <label class="toggle-switch">
            <input type="checkbox" id="accessibilityToggle" onchange="toggleAccessibility()" 
                """ + ("checked" if st.session_state.accessibility_mode else "") + """>
            <span class="toggle-slider"></span>
        </label>
        <span class="accessibility-label">Accessibility Mode</span>
    </div>
    <script>
    function toggleAccessibility() {
        const checked = document.getElementById('accessibilityToggle').checked;
        const params = new URLSearchParams(window.location.search);
        params.set('accessibility', checked ? 'true' : 'false');
        window.location.search = params.toString();
    }
    </script>
    """
    
    st.sidebar.markdown("<h3>Accessibility Options</h3>", unsafe_allow_html=True)
    st.sidebar.markdown(accessibility_html, unsafe_allow_html=True)
    
    # Get accessibility mode from URL parameter
    query_params = st.experimental_get_query_params()
    if 'accessibility' in query_params:
        st.session_state.accessibility_mode = query_params['accessibility'][0] == 'true'
    
    if st.session_state.accessibility_mode:
        st.sidebar.markdown("""
        <style>
        /* Increase font size for better readability */
        body {
            font-size: 18px !important;
        }
        /* Increase contrast */
        .stApp {
            color: #000000 !important;
        }
        /* Add focus indicators */
        *:focus {
            outline: 3px solid #1E88E5 !important;
            outline-offset: 2px !important;
        }
        /* Larger touch targets */
        button, select, input {
            min-height: 44px !important;
            min-width: 44px !important;
        }
        </style>
        """, unsafe_allow_html=True)
    
    return st.session_state.accessibility_mode

# ============ LOAD CSS ============
def load_css():
    base_css = """
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&family=Poppins:wght@300;400;500;600;700&display=swap');
    
    :root {
        --primary-color: #00704A;
        --secondary-color: #C6A969;
        --text-color: #1E3932;
        --bg-color: #F7F9FC;
        --card-bg: #FFFFFF;
        --shadow-color: rgba(0, 0, 0, 0.1);
        --accent-color: #D4E9E2;
        --danger-color: #E74C3C;
        --success-color: #00704A;
        --warning-color: #F39C12;
        --info-color: #3498DB;
    }
    
    [data-theme="dark"] {
        --primary-color: #00704A;
        --secondary-color: #C6A969;
        --text-color: #E0E0E0;
        --bg-color: #1A1A1A;
        --card-bg: #2D2D2D;
        --shadow-color: rgba(0, 0, 0, 0.4);
        --accent-color: #1E3932;
        --danger-color: #E74C3C;
        --success-color: #2ECC71;
        --warning-color: #F39C12;
        --info-color: #3498DB;
    }
    
    [data-theme="royal"] {
        --primary-color: #1A48B4;
        --secondary-color: #F5A623;
        --text-color: #FFFFFF;
        --bg-color: #0A1E3D;
        --card-bg: #13294B;
        --shadow-color: rgba(0, 0, 0, 0.5);
        --accent-color: #2A56C8;
        --danger-color: #E74C3C;
        --success-color: #2ECC71;
        --warning-color: #F39C12;
        --info-color: #3498DB;
    }
    
    .stApp {
        font-family: 'Poppins', sans-serif;
        background: var(--bg-color);
        color: var(--text-color);
        transition: all 0.3s ease;
    }
    
    h1, h2, h3, h4, h5, h6 {
        font-family: 'Montserrat', sans-serif;
        font-weight: 600;
        color: var(--primary-color);
        transition: color 0.3s ease;
    }
    
    .card {
        background: var(--card-bg);
        border-radius: 16px;
        padding: 20px;
        box-shadow: 0 8px 30px var(--shadow-color);
        transition: all 0.3s ease;
        border: 1px solid rgba(255, 255, 255, 0.08);
        overflow: hidden;
        position: relative;
    }
    
    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 35px var(--shadow-color);
    }
    
    .card:before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 0%;
        height: 4px;
        background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
        transition: width 0.4s ease;
    }
    
    .card:hover:before {
        width: 100%;
    }
    
    .stButton>button {
        border-radius: 50px;
        padding: 10px 24px;
        font-weight: 500;
        background: var(--primary-color);
        color: white;
        border: none;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(0, 112, 74, 0.2);
        text-transform: uppercase;
        font-size: 14px;
        letter-spacing: 0.5px;
    }
    
    .stButton>button:hover {
        transform: translateY(-2px);
        box-shadow: 0 7px 20px rgba(0, 112, 74, 0.3);
        background: linear-gradient(45deg, var(--primary-color), var(--secondary-color));
    }
    
    .stButton>button:active {
        transform: translateY(1px);
    }
    
    .stExpander {
        border-radius: 16px;
        border: none;
        box-shadow: 0 4px 20px var(--shadow-color);
        overflow: hidden;
        transition: all 0.3s ease;
    }
    
    .stExpander:hover {
        box-shadow: 0 8px 25px var(--shadow-color);
    }
    
    /* Select boxes styling */
    .stSelectbox label, .stMultiselect label {
        color: var(--primary-color);
        font-weight: 500;
    }
    
    .stSelectbox > div > div, .stMultiselect > div > div {
        background: var(--card-bg);
        border-radius: 8px;
        border: 1px solid rgba(0, 112, 74, 0.3);
        transition: all 0.2s ease;
    }
    
    .stSelectbox > div > div:hover, .stMultiselect > div > div:hover {
        border-color: var(--primary-color);
    }
    
    /* Input fields styling */
    div[data-baseweb="input"] {
        background: var(--card-bg);
        border-radius: 8px;
        border: 1px solid rgba(0, 112, 74, 0.3);
        transition: all 0.2s ease;
    }
    
    div[data-baseweb="input"]:focus-within {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(0, 112, 74, 0.2);
    }
    
    /* Spinner animation */
    .loader {
        width: 48px;
        height: 48px;
        border: 5px solid var(--primary-color);
        border-bottom-color: transparent;
        border-radius: 50%;
        display: inline-block;
        box-sizing: border-box;
        animation: rotation 1s linear infinite;
    }
    
    @keyframes rotation {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }
    
    /* Progress bars */
    .stProgress > div > div {
        background-color: var(--primary-color);
        border-radius: 10px;
        transition: width 0.6s cubic-bezier(0.34, 1.56, 0.64, 1);
    }
    
    .stProgress > div {
        background-color: rgba(0, 112, 74, 0.1);
        border-radius: 10px;
    }
    
    /* Improved animation effects */
    .fade-in {
        animation: fadeIn 0.6s cubic-bezier(0.39, 0.575, 0.565, 1);
    }
    
    .slide-up {
        animation: slideUp 0.5s cubic-bezier(0.19, 1, 0.22, 1);
    }
    
    .scale-in {
        animation: scaleIn 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    }
    
    @keyframes fadeIn {
        0% { opacity: 0; }
        100% { opacity: 1; }
    }
    
    @keyframes slideUp {
        0% { opacity: 0; transform: translateY(30px); }
        100% { opacity: 1; transform: translateY(0); }
    }
    
    @keyframes scaleIn {
        0% { opacity: 0; transform: scale(0.9); }
        100% { opacity: 1; transform: scale(1); }
    }
    
    /* Tooltips */
    .tooltip {
        position: relative;
        display: inline-block;
    }
    
    .tooltip .tooltiptext {
        visibility: hidden;
        width: 200px;
        background-color: var(--card-bg);
        color: var(--text-color);
        text-align: center;
        border-radius: 8px;
        padding: 10px;
        position: absolute;
        z-index: 1;
        bottom: 125%;
        left: 50%;
        margin-left: -100px;
        opacity: 0;
        transition: opacity 0.3s;
        font-size: 14px;
        box-shadow: 0 5px 15px var(--shadow-color);
        border: 1px solid rgba(0, 112, 74, 0.1);
    }
    
    .tooltip:hover .tooltiptext {
        visibility: visible;
        opacity: 1;
    }
    
    /* Bootstrap icon styling */
    i.bi {
        font-size: 1.2em;
        vertical-align: middle;
        color: var(--primary-color);
        transition: all 0.3s ease;
    }
    
    /* Custom scrollbar */
    ::-webkit-scrollbar {
        width: 8px;
        height: 8px;
    }
    
    ::-webkit-scrollbar-track {
        background: var(--bg-color);
    }
    
    ::-webkit-scrollbar-thumb {
        background: var(--primary-color);
        border-radius: 4px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
        background: var(--secondary-color);
    }
    
    /* Table styling */
    .dataframe {
        border-collapse: separate !important;
        border-spacing: 0 !important;
        border-radius: 10px !important;
        overflow: hidden !important;
        width: 100% !important;
        margin-bottom: 20px !important;
        box-shadow: 0 4px 15px var(--shadow-color) !important;
    }
    
    .dataframe th {
        background-color: var(--primary-color) !important;
        color: white !important;
        font-weight: 500 !important;
        text-align: left !important;
        padding: 12px 15px !important;
        border: none !important;
    }
    
    .dataframe td {
        padding: 10px 15px !important;
        border: none !important;
        border-bottom: 1px solid rgba(0, 112, 74, 0.1) !important;
        background-color: var(--card-bg) !important;
        color: var(--text-color) !important;
    }
    
    .dataframe tr:last-child td {
        border-bottom: none !important;
    }
    
    .dataframe tr:hover td {
        background-color: rgba(0, 112, 74, 0.05) !important;
        transition: background-color 0.3s ease !important;
    }
    
    /* Neo Pop Design Elements */
    .neo-pop-btn {
        background: var(--primary-color);
        color: white;
        border: none;
        border-radius: 12px;
        padding: 16px 24px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        box-shadow: 0 5px 0 var(--secondary-color);
        transform: translateY(0);
        transition: all 0.2s ease;
    }
    
    .neo-pop-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 7px 0 var(--secondary-color);
    }
    
    .neo-pop-btn:active {
        transform: translateY(2px);
        box-shadow: 0 3px 0 var(--secondary-color);
    }
    
    /* Badge */
    .badge {
        background: var(--primary-color);
        color: white;
        border-radius: 30px;
        padding: 5px 10px;
        font-size: 12px;
        font-weight: 500;
        display: inline-block;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    .badge-success {
        background: var(--success-color);
    }
    
    .badge-danger {
        background: var(--danger-color);
    }
    
    .badge-warning {
        background: var(--warning-color);
        color: #333;
    }
    
    .badge-info {
        background: var(--info-color);
    }
    
    /* Custom form inputs */
    .form-input {
        background: var(--card-bg);
        border: 2px solid rgba(0, 112, 74, 0.2);
        border-radius: 8px;
        padding: 12px 16px;
        width: 100%;
        font-family: 'Poppins', sans-serif;
        font-size: 16px;
        color: var(--text-color);
        transition: all 0.3s ease;
    }
    
    .form-input:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(0, 112, 74, 0.2);
        outline: none;
    }
    
    /* Footer styling */
    .footer {
        text-align: center;
        margin-top: 40px;
        padding: 20px;
        font-size: 14px;
        color: var(--text-color);
        border-top: 1px solid rgba(0, 112, 74, 0.1);
    }
    
    /* Fancy headings */
    .fancy-heading {
        position: relative;
        padding-bottom: 10px;
        margin-bottom: 20px;
    }
    
    .fancy-heading:after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 60px;
        height: 4px;
        background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
        border-radius: 2px;
    }
    
    /* Card grid layout */
    .card-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin: 20px 0;
    }
    
    /* Notification bell */
    .notification-bell {
        position: relative;
        cursor: pointer;
    }
    
    .notification-count {
        position: absolute;
        top: -8px;
        right: -8px;
        background: var(--danger-color);
        color: white;
        border-radius: 50%;
        font-size: 12px;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    /* Gamification elements */
    .achievement-badge {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        width: 60px;
        height: 60px;
        border-radius: 50%;
        font-size: 24px;
        margin: 10px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
    }
    
    .achievement-badge:hover {
        transform: rotate(10deg) scale(1.1);
    }
    
    /* Points display */
    .points-display {
        display: inline-flex;
        align-items: center;
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        padding: 8px 16px;
        border-radius: 20px;
        font-weight: 600;
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
    }
    
    .points-display i {
        margin-right: 8px;
        color: white;
    }
    
    /* Accessibility mode styles */
    body.accessibility-mode {
        font-size: 18px;
    }
    
    body.accessibility-mode .stButton>button {
        font-size: 18px;
        padding: 12px 28px;
    }
    
    body.accessibility-mode input, 
    body.accessibility-mode select {
        font-size: 18px;
    }
    
    body.accessibility-mode *:focus {
        outline: 3px solid var(--info-color);
        outline-offset: 2px;
    }
    
    /* Loan timeline */
    .loan-timeline